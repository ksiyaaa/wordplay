export type Codepoint = {
    hex: number;
    name: string;
    category: string;
    emoji: { group: string; subgroup: string } | undefined;
};

let codepoints: Codepoint[] | undefined = undefined;

export async function getCodepoints(): Promise<Codepoint[]> {
    if (codepoints !== undefined) return codepoints;

    // Generated by unicode/compress.js. Run with Node.
    const UnicodeDataTxt: string = await import.meta
        .glob<string>('./codes.txt', { query: '?raw' })
        ['./codes.txt?raw']();

    codepoints = [];
    for (const entry of UnicodeDataTxt.split('\n')) {
        const [code, name, category, group, subgroup] = entry.split(';');
        codepoints.push({
            hex: parseInt(code, 16),
            name: name.toLowerCase(),
            category,
            emoji: group && subgroup ? { group, subgroup } : undefined,
        });
    }
    return codepoints;
}

export async function getUnicodeNamed(name: string) {
    name = name.toLowerCase();
    return (await getCodepoints()).filter((point) => point.name.includes(name));
}

export async function getEmoji() {
    return (await getCodepoints()).filter((point) => point.emoji !== undefined);
}
