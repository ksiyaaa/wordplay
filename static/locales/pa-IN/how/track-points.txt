ਬਿੰਦੂਆਂ ਦਾ ਧਿਆਨ ਰੱਖੋ

ਕਈ ਵਾਰ ਇੱਕ ਗੇਮ ਵਿੱਚ, ਜਦੋਂ ਕੁਝ ਵਾਪਰਦਾ ਹੈ ਤਾਂ ਬਿੰਦੂਆਂ ਦਾ ਧਿਆਨ ਰੱਖਣਾ ਮਦਦਗਾਰ ਹੁੰਦਾ ਹੈ। ਜੇਕਰ ਵਰਡਪਲੇ ਵੇਰੀਏਬਲਾਂ ਨੂੰ ਨਵੇਂ ਮੁੱਲ ਦੇਣ ਦੀ ਆਗਿਆ ਨਹੀਂ ਦਿੰਦਾ, ਤਾਂ ਅਸੀਂ ਇਹ ਕਿਵੇਂ ਕਰ ਸਕਦੇ ਹਾਂ?

ਚਾਲ ਇਹ ਹੈ ਕਿ ਇੱਕ ਦੀ ਵਰਤੋਂ ਕੀਤੀ ਜਾਵੇ @Reaction ਪਰਿਭਾਸ਼ਿਤ ਕਰਨ ਲਈ ਇੱਕ @Bind ਦਾ ਮੁੱਲ, ਅਤੇ ਧਿਆਨ ਨਾਲ ਸੋਚਣਾ ਕਿ ਕਿਹੜੀ ਘਟਨਾ ਦੇ ਨਤੀਜੇ ਵਜੋਂ ਇੱਕ ਨਵਾਂ ਮੁੱਲ ਬਣਨਾ ਚਾਹੀਦਾ ਹੈ @Bind .

ਉਦਾਹਰਣ ਵਜੋਂ, ਇੱਕ ਬਹੁਤ ਹੀ ਸਧਾਰਨ ਖੇਡ ਦੀ ਕਲਪਨਾ ਕਰੋ ਜਿੱਥੇ ਇੱਕ ਖਿਡਾਰੀ ਹਰ ਵਾਰ ਕੀਬੋਰਡ 'ਤੇ ਇੱਕ ਗੁਪਤ ਕੁੰਜੀ ਟਾਈਪ ਕਰਨ 'ਤੇ ਵਧੇਰੇ ਅੰਕ ਪ੍ਰਾਪਤ ਕਰਦਾ ਹੈ।

\points: 0 … ['ਏ' 'ਈ' 'ਮੈਂ' 'ਓ' 'ਯੂ'].has(Key()) … points + 1\

ਇਹ ਉਦਾਹਰਣ ਕਹਿੰਦੀ ਹੈ,/ਅੰਕ 0 ਤੋਂ ਸ਼ੁਰੂ ਹੁੰਦੇ ਹਨ, ਅਤੇ ਫਿਰ ਹਰ ਵਾਰ ਜਦੋਂ ਕੋਈ ਕੁੰਜੀ ਦਬਾਈ ਜਾਂਦੀ ਹੈ, ਜੇਕਰ ਕੁੰਜੀ ਸਵਰਾਂ ਦੀ ਸੂਚੀ ਵਿੱਚ ਹੈ, ਤਾਂ ਅੰਕ ਮੌਜੂਦਾ ਅੰਕ ਪਲੱਸ ਵਨ ਬਣ ਜਾਂਦੇ ਹਨ।/ਹਰ ਵਾਰ\Key()\  @Stream ਬਦਲਦਾ ਹੈ, ਪ੍ਰੋਗਰਾਮ ਮੁੜ ਮੁਲਾਂਕਣ ਕਰਦਾ ਹੈ, ਸਥਿਤੀ ਦੀ ਜਾਂਚ ਕਰਦਾ ਹੈ, ਅਤੇ ਜੇਕਰ ਇਹ ਸੱਚ ਹੈ, ਤਾਂ ਦਿੰਦਾ ਹੈ\points\ਇੱਕ ਨਵਾਂ ਮੁੱਲ।

ਇਸ ਵਿੱਚ ਪ੍ਰਤੀਕ੍ਰਿਆ ਦੇ ਤਿੰਨ ਹਿੱਸੇ ਹਨ:

• ਅੰਕਾਂ ਲਈ ਸ਼ੁਰੂਆਤੀ ਮੁੱਲ (\0\)• ਉਹ ਸ਼ਰਤ ਜੋ, ਜਦੋਂ ਸੱਚ ਹੋਵੇ, ਇੱਕ ਨਵਾਂ ਮੁੱਲ ਪੈਦਾ ਕਰਦੀ ਹੈ (\['ਏ' 'ਈ' 'ਮੈਂ' 'ਓ' 'ਯੂ'].has(Key())\)• ਨਵਾਂ ਮੁੱਲ, ਜੇਕਰ ਸ਼ਰਤ ਸੱਚ ਹੋ ਜਾਂਦੀ ਹੈ (\points + 1\)

ਵਧੇਰੇ ਸੂਝਵਾਨ ਬਿੰਦੂ ਟਰੈਕਿੰਗ ਬਣਾਉਣ ਲਈ, ਸਿਰਫ਼ ਹੋਰ ਸੂਝਵਾਨ ਸ਼ਰਤਾਂ ਜਾਂ ਨਵੇਂ ਮੁੱਲ ਬਣਾਓ। ਉਨ੍ਹਾਂ ਸ਼ਰਤਾਂ ਅਤੇ ਨਵੇਂ ਮੁੱਲਾਂ ਦੇ ਨਿਯਮਾਂ ਬਾਰੇ ਸੋਚਣ ਲਈ ਕੁਝ ਸਮਾਂ ਕੱਢੋ, ਅਤੇ ਫਿਰ ਉਨ੍ਹਾਂ ਨੂੰ ਕੋਡ ਵਿੱਚ ਪ੍ਰਗਟ ਕਰਨ ਦੀ ਕੋਸ਼ਿਸ਼ ਕਰੋ।

track-points